version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: slack-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-slackuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-slackpass}
      POSTGRES_DB: ${POSTGRES_DB:-slackclone}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - slack-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: slack-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - slack-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: slack-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - slack-network
    restart: unless-stopped
    command: server /data --console-address ":9001"

  # Slack Clone Backend API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: slack-api
    environment:
      NODE_ENV: production
      PORT: 8000
      DATABASE_URL: postgresql://${POSTGRES_USER:-slackuser}:${POSTGRES_PASSWORD:-slackpass}@postgres:5432/${POSTGRES_DB:-slackclone}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: ${S3_BUCKET:-slack-files}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-minioadmin}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
      - minio
    networks:
      - slack-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.slack-api.rule=PathPrefix(\`/api\`) || PathPrefix(\`/health\`)"
      - "traefik.http.services.slack-api.loadbalancer.server.port=8000"

  # Nginx Load Balancer (optional, for production scaling)
  nginx:
    image: nginx:alpine
    container_name: slack-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - api
    networks:
      - slack-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  slack-network:
    driver: bridge
